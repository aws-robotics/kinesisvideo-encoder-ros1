name: Build & Test release-latest
on:
  schedule:
    # Run every hour. This helps detect flakiness,
    # and broken external dependencies.
    - cron:  '0 * * * *'

jobs:
  build_and_test_release_latest:
    name: Build and Test Release Latest ROS ${{ matrix.ros_version }} ${{ matrix.ros_distro }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ros_distro: [kinetic, melodic]
        include:
        - ros_distro: kinetic
          ubuntu_distro: xenial
        - ros_distro: melodic
          ubuntu_distro: bionic
    container:
      image: rostooling/setup-ros-docker:ubuntu-${{ matrix.ubuntu_distro }}-ros-${{ matrix.ros_distro }}-ros-base-latest
    env:
      # Needed for the CMakeLists.txt setup
      ROS_DISTRO: ${{ matrix.ros_distro }}
      ROS_VERSION: 1
    steps:
    # Needed to access the vcs repos file from the workspace
    - name: Checkout source
      uses: actions/checkout@v2
    - name: Run action-ros-ci to build and test
      uses: ros-tooling/action-ros-ci@0.1.0
      with:
        target-ros1-distro: ${{ env.ROS_VERSION == '1' && matrix.ros_distro || '' }}
        target-ros2-distro: ${{ env.ROS_VERSION == '2' && matrix.ros_distro || '' }}
        package-name: h264_video_encoder
        # schedule runs against the default branch (master), so specify release-latest via repos file
        vcs-repo-file-url: "${{ github.workspace }}/.github/workflows/release_latest.repos"
    - name: Upload resulting colcon logs
      uses: actions/upload-artifact@v1
      with:
        name: colcon-logs-${{ matrix.ubuntu_distro }}-ros-${{ matrix.ros_distro }}
        path: ros_ws/log
  log_workflow_status_to_cloudwatch:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:bionic
    needs:
    - build_and_test_release_latest
    # Don't skip if prior steps failed, but don't run on a fork because it won't have access to AWS secrets
    if: ${{ always() && ! github.event.repository.fork && ! github.event.pull_request.head.repo.fork }}
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - uses: ros-tooling/action-cloudwatch-metrics@0.0.4
      with:
        metric-dimensions: >-
          [
            { "Name": "github.event_name", "Value": "${{ github.event_name }}" },
            { "Name": "github.ref", "Value": "release-latest" },
            { "Name": "github.repository", "Value": "${{ github.repository }}" }
          ]
        # Checks if any of the jobs have failed.
        #
        # needs.*.result is returns the list of all success statuses as an
        # array, i.e. ['success', 'failure, 'success']
        # join() converts the array to a string 'successfailuresuccess'
        # contains() checks whether the string contains failure
        metric-value: ${{ ! contains(join(needs.*.result, ''), 'failure') && ! contains(join(needs.*.result, ''), 'cancelled') }}
